package utils

import (
	"fmt"
	"os"
	"strconv"
	"strings"

	"github.com/joho/godotenv"
	logger "github.com/sirupsen/logrus"
)

// 常量定义保持不变
const (
	EnvFile            = ".env"
	ApiKey             = "YT_API_KEY"
	BotName            = "BOT_NAME"
	CommandPrefix      = "COMMAND_PREFIX"
	SuperUsers         = "SUPER_USERS"
	WebSocketServerUrl = "WS_SERVER_URL"
	WebSocketClientUrl = "WS_CLIENT_URL"
	AccessToken        = "ACCESS_TOKEN"
)

var requiredVars = []string{
	ApiKey,
	BotName,
	SuperUsers,
}

func init() {
	//设置日志格式并加载环境变量配置
	SetupLogger()
	loadEnvs()
}

// 读取环境变量并进行验证
func loadEnvs() {
	if _, err := os.Stat(EnvFile); os.IsNotExist(err) {
		generateAndExit()
	}

	err := godotenv.Load(EnvFile)
	if err != nil {
		logger.Fatalf("错误: 无法加载文件 %s: %v", EnvFile, err)
	}

	for _, varName := range requiredVars {
		if os.Getenv(varName) == "" {
			logger.Errorf("必需的环境变量 '%s' 在 '%s' 文件中未设置或为空。", varName, EnvFile)
			logger.Error("请填写该变量的值后重新运行程序。")
			os.Exit(1)
		}
	}

	serverURL := os.Getenv(WebSocketServerUrl)
	clientURL := os.Getenv(WebSocketClientUrl)

	if serverURL == "" && clientURL == "" {
		logger.Errorf("错误: 必须在 '%s' 和 '%s' 中至少配置一个。", WebSocketServerUrl, WebSocketClientUrl)
		logger.Errorf("请在 '%s' 文件中选择其中一个进行配置后重新运行程序。", EnvFile)
		os.Exit(1)
	}

	if serverURL != "" && clientURL != "" {
		logger.Errorf("错误: '%s' 和 '%s' 不能同时配置。", WebSocketServerUrl, WebSocketClientUrl)
		logger.Errorf("请在 '%s' 文件中只保留所需要的一个，将另一个的值留空，以正确启用正向或反向ws。", EnvFile)
		os.Exit(1)
	}

	logger.Info("所有环境变量已成功加载")
}

// 生成模板配置文件
func generateAndExit() {
	logger.Infof("'%s' 文件未找到，正在创建一个新的模板文件...", EnvFile)

	var contentBuilder strings.Builder
	contentBuilder.WriteString("# ---- Auto generated by skygo ----\n")
	contentBuilder.WriteString("# 请填写以下环境变量的值\n\n")

	contentBuilder.WriteString("# ---- 必需配置 ----\n")
	contentBuilder.WriteString("# 填入你自己的应天api后台的api_key\n")
	contentBuilder.WriteString(fmt.Sprintf("%s=\n", ApiKey))
	contentBuilder.WriteString("# 机器人的名称，可自定义，默认为'skygo'\n")
	contentBuilder.WriteString(fmt.Sprintf("%s=skygo\n", BotName))
	contentBuilder.WriteString("# 命令触发前缀，可自定义，默认为'.'\n")
	contentBuilder.WriteString(fmt.Sprintf("%s=.\n", CommandPrefix))
	contentBuilder.WriteString("# 超级用户ID列表, 使用英文逗号(,)分隔, 例如: 12345,67890\n")
	contentBuilder.WriteString(fmt.Sprintf("%s=\n", SuperUsers))
	contentBuilder.WriteString("\n")

	contentBuilder.WriteString("# ---- WebSocket配置 (二选一) ----\n")
	contentBuilder.WriteString("# 请在以下两个变量中选择一个进行配置，另一个留空。\n")
	contentBuilder.WriteString("# 反向WS (默认启用)\n")
	contentBuilder.WriteString(fmt.Sprintf("%s=ws://127.0.0.1:8000\n", WebSocketServerUrl))
	contentBuilder.WriteString("# 正向WS\n")
	contentBuilder.WriteString(fmt.Sprintf("%s=\n", WebSocketClientUrl))
	contentBuilder.WriteString("# AccessToken配置，需要与对接的协议端保持一致，默认为空\n")
	contentBuilder.WriteString(fmt.Sprintf("%s=\n", AccessToken))

	err := os.WriteFile(EnvFile, []byte(contentBuilder.String()), 0644)
	if err != nil {
		logger.Fatalf("错误: 创建 %s 文件失败: %v", EnvFile, err)
	}

	logger.Infof("新的 '%s' 文件已创建", EnvFile)
	logger.Info("请按要求填写所有环境变量后重新启动程序")
	os.Exit(1)
}

// 获取超级用户数组
func GetSuperUsers() []int64 {
	superUsersStr := os.Getenv(SuperUsers)
	if superUsersStr == "" {
		return []int64{}
	}

	idStrings := strings.Split(superUsersStr, ",")
	var result []int64

	for _, idStr := range idStrings {
		trimmedID := strings.TrimSpace(idStr)
		if trimmedID == "" {
			continue
		}

		id, err := strconv.ParseInt(trimmedID, 10, 64)
		if err != nil {
			logger.Fatalf("错误: 无法将 '%s' 解析为有效的超级用户ID，请检查 '%s' 文件中的 '%s' 变量",
				trimmedID, EnvFile, SuperUsers)
		}
		result = append(result, id)
	}
	return result
}
